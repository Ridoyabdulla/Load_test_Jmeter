/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 274.0, "minX": 0.0, "maxY": 10000.0, "series": [{"data": [[0.0, 274.0], [0.1, 274.0], [0.2, 275.0], [0.3, 275.0], [0.4, 276.0], [0.5, 276.0], [0.6, 276.0], [0.7, 277.0], [0.8, 277.0], [0.9, 277.0], [1.0, 278.0], [1.1, 278.0], [1.2, 278.0], [1.3, 278.0], [1.4, 278.0], [1.5, 278.0], [1.6, 279.0], [1.7, 279.0], [1.8, 279.0], [1.9, 279.0], [2.0, 279.0], [2.1, 279.0], [2.2, 279.0], [2.3, 279.0], [2.4, 279.0], [2.5, 279.0], [2.6, 279.0], [2.7, 279.0], [2.8, 279.0], [2.9, 279.0], [3.0, 279.0], [3.1, 280.0], [3.2, 280.0], [3.3, 280.0], [3.4, 280.0], [3.5, 280.0], [3.6, 280.0], [3.7, 280.0], [3.8, 280.0], [3.9, 280.0], [4.0, 280.0], [4.1, 281.0], [4.2, 281.0], [4.3, 281.0], [4.4, 281.0], [4.5, 281.0], [4.6, 281.0], [4.7, 281.0], [4.8, 281.0], [4.9, 281.0], [5.0, 281.0], [5.1, 281.0], [5.2, 281.0], [5.3, 281.0], [5.4, 281.0], [5.5, 281.0], [5.6, 281.0], [5.7, 281.0], [5.8, 281.0], [5.9, 281.0], [6.0, 281.0], [6.1, 281.0], [6.2, 281.0], [6.3, 282.0], [6.4, 282.0], [6.5, 282.0], [6.6, 282.0], [6.7, 282.0], [6.8, 282.0], [6.9, 282.0], [7.0, 282.0], [7.1, 282.0], [7.2, 283.0], [7.3, 283.0], [7.4, 283.0], [7.5, 283.0], [7.6, 283.0], [7.7, 283.0], [7.8, 283.0], [7.9, 283.0], [8.0, 283.0], [8.1, 283.0], [8.2, 283.0], [8.3, 283.0], [8.4, 283.0], [8.5, 283.0], [8.6, 284.0], [8.7, 284.0], [8.8, 284.0], [8.9, 284.0], [9.0, 284.0], [9.1, 284.0], [9.2, 284.0], [9.3, 284.0], [9.4, 284.0], [9.5, 284.0], [9.6, 284.0], [9.7, 284.0], [9.8, 284.0], [9.9, 284.0], [10.0, 284.0], [10.1, 284.0], [10.2, 284.0], [10.3, 284.0], [10.4, 285.0], [10.5, 285.0], [10.6, 285.0], [10.7, 285.0], [10.8, 285.0], [10.9, 285.0], [11.0, 285.0], [11.1, 285.0], [11.2, 285.0], [11.3, 285.0], [11.4, 285.0], [11.5, 285.0], [11.6, 285.0], [11.7, 285.0], [11.8, 285.0], [11.9, 285.0], [12.0, 285.0], [12.1, 286.0], [12.2, 286.0], [12.3, 286.0], [12.4, 286.0], [12.5, 286.0], [12.6, 286.0], [12.7, 286.0], [12.8, 286.0], [12.9, 286.0], [13.0, 286.0], [13.1, 286.0], [13.2, 286.0], [13.3, 286.0], [13.4, 286.0], [13.5, 286.0], [13.6, 286.0], [13.7, 286.0], [13.8, 286.0], [13.9, 287.0], [14.0, 287.0], [14.1, 287.0], [14.2, 287.0], [14.3, 287.0], [14.4, 287.0], [14.5, 287.0], [14.6, 287.0], [14.7, 287.0], [14.8, 287.0], [14.9, 287.0], [15.0, 287.0], [15.1, 287.0], [15.2, 287.0], [15.3, 287.0], [15.4, 287.0], [15.5, 287.0], [15.6, 288.0], [15.7, 288.0], [15.8, 288.0], [15.9, 288.0], [16.0, 288.0], [16.1, 288.0], [16.2, 288.0], [16.3, 288.0], [16.4, 288.0], [16.5, 288.0], [16.6, 288.0], [16.7, 288.0], [16.8, 288.0], [16.9, 288.0], [17.0, 288.0], [17.1, 289.0], [17.2, 289.0], [17.3, 289.0], [17.4, 289.0], [17.5, 289.0], [17.6, 289.0], [17.7, 289.0], [17.8, 289.0], [17.9, 289.0], [18.0, 289.0], [18.1, 289.0], [18.2, 289.0], [18.3, 289.0], [18.4, 289.0], [18.5, 290.0], [18.6, 290.0], [18.7, 290.0], [18.8, 290.0], [18.9, 290.0], [19.0, 290.0], [19.1, 290.0], [19.2, 290.0], [19.3, 290.0], [19.4, 290.0], [19.5, 290.0], [19.6, 290.0], [19.7, 290.0], [19.8, 290.0], [19.9, 290.0], [20.0, 290.0], [20.1, 291.0], [20.2, 291.0], [20.3, 291.0], [20.4, 291.0], [20.5, 291.0], [20.6, 291.0], [20.7, 291.0], [20.8, 291.0], [20.9, 291.0], [21.0, 291.0], [21.1, 291.0], [21.2, 291.0], [21.3, 291.0], [21.4, 291.0], [21.5, 291.0], [21.6, 291.0], [21.7, 291.0], [21.8, 292.0], [21.9, 292.0], [22.0, 292.0], [22.1, 292.0], [22.2, 292.0], [22.3, 292.0], [22.4, 292.0], [22.5, 293.0], [22.6, 293.0], [22.7, 293.0], [22.8, 293.0], [22.9, 293.0], [23.0, 293.0], [23.1, 293.0], [23.2, 293.0], [23.3, 294.0], [23.4, 294.0], [23.5, 294.0], [23.6, 294.0], [23.7, 294.0], [23.8, 294.0], [23.9, 294.0], [24.0, 294.0], [24.1, 294.0], [24.2, 294.0], [24.3, 294.0], [24.4, 294.0], [24.5, 295.0], [24.6, 295.0], [24.7, 295.0], [24.8, 295.0], [24.9, 295.0], [25.0, 295.0], [25.1, 295.0], [25.2, 295.0], [25.3, 295.0], [25.4, 295.0], [25.5, 295.0], [25.6, 295.0], [25.7, 295.0], [25.8, 296.0], [25.9, 296.0], [26.0, 296.0], [26.1, 296.0], [26.2, 296.0], [26.3, 296.0], [26.4, 296.0], [26.5, 297.0], [26.6, 297.0], [26.7, 297.0], [26.8, 297.0], [26.9, 297.0], [27.0, 297.0], [27.1, 297.0], [27.2, 297.0], [27.3, 297.0], [27.4, 297.0], [27.5, 297.0], [27.6, 297.0], [27.7, 297.0], [27.8, 297.0], [27.9, 298.0], [28.0, 298.0], [28.1, 298.0], [28.2, 298.0], [28.3, 298.0], [28.4, 298.0], [28.5, 298.0], [28.6, 298.0], [28.7, 299.0], [28.8, 299.0], [28.9, 299.0], [29.0, 299.0], [29.1, 299.0], [29.2, 299.0], [29.3, 300.0], [29.4, 300.0], [29.5, 300.0], [29.6, 300.0], [29.7, 300.0], [29.8, 300.0], [29.9, 300.0], [30.0, 300.0], [30.1, 300.0], [30.2, 300.0], [30.3, 300.0], [30.4, 300.0], [30.5, 300.0], [30.6, 300.0], [30.7, 301.0], [30.8, 301.0], [30.9, 301.0], [31.0, 301.0], [31.1, 301.0], [31.2, 301.0], [31.3, 301.0], [31.4, 301.0], [31.5, 301.0], [31.6, 301.0], [31.7, 301.0], [31.8, 302.0], [31.9, 302.0], [32.0, 302.0], [32.1, 302.0], [32.2, 302.0], [32.3, 302.0], [32.4, 302.0], [32.5, 302.0], [32.6, 302.0], [32.7, 303.0], [32.8, 303.0], [32.9, 303.0], [33.0, 303.0], [33.1, 303.0], [33.2, 303.0], [33.3, 303.0], [33.4, 303.0], [33.5, 303.0], [33.6, 304.0], [33.7, 304.0], [33.8, 304.0], [33.9, 304.0], [34.0, 304.0], [34.1, 304.0], [34.2, 304.0], [34.3, 304.0], [34.4, 304.0], [34.5, 304.0], [34.6, 304.0], [34.7, 304.0], [34.8, 304.0], [34.9, 304.0], [35.0, 305.0], [35.1, 305.0], [35.2, 305.0], [35.3, 305.0], [35.4, 305.0], [35.5, 305.0], [35.6, 305.0], [35.7, 305.0], [35.8, 305.0], [35.9, 306.0], [36.0, 306.0], [36.1, 306.0], [36.2, 306.0], [36.3, 306.0], [36.4, 306.0], [36.5, 306.0], [36.6, 306.0], [36.7, 307.0], [36.8, 307.0], [36.9, 307.0], [37.0, 307.0], [37.1, 307.0], [37.2, 307.0], [37.3, 307.0], [37.4, 307.0], [37.5, 307.0], [37.6, 307.0], [37.7, 308.0], [37.8, 308.0], [37.9, 308.0], [38.0, 308.0], [38.1, 308.0], [38.2, 308.0], [38.3, 308.0], [38.4, 308.0], [38.5, 308.0], [38.6, 309.0], [38.7, 309.0], [38.8, 309.0], [38.9, 309.0], [39.0, 309.0], [39.1, 309.0], [39.2, 310.0], [39.3, 310.0], [39.4, 310.0], [39.5, 310.0], [39.6, 310.0], [39.7, 310.0], [39.8, 310.0], [39.9, 310.0], [40.0, 311.0], [40.1, 311.0], [40.2, 311.0], [40.3, 311.0], [40.4, 311.0], [40.5, 311.0], [40.6, 311.0], [40.7, 311.0], [40.8, 311.0], [40.9, 311.0], [41.0, 312.0], [41.1, 312.0], [41.2, 312.0], [41.3, 312.0], [41.4, 312.0], [41.5, 312.0], [41.6, 312.0], [41.7, 312.0], [41.8, 312.0], [41.9, 312.0], [42.0, 313.0], [42.1, 313.0], [42.2, 313.0], [42.3, 313.0], [42.4, 313.0], [42.5, 313.0], [42.6, 313.0], [42.7, 313.0], [42.8, 313.0], [42.9, 314.0], [43.0, 314.0], [43.1, 314.0], [43.2, 314.0], [43.3, 314.0], [43.4, 314.0], [43.5, 314.0], [43.6, 314.0], [43.7, 314.0], [43.8, 314.0], [43.9, 314.0], [44.0, 315.0], [44.1, 315.0], [44.2, 315.0], [44.3, 315.0], [44.4, 315.0], [44.5, 315.0], [44.6, 315.0], [44.7, 315.0], [44.8, 315.0], [44.9, 315.0], [45.0, 315.0], [45.1, 315.0], [45.2, 315.0], [45.3, 315.0], [45.4, 315.0], [45.5, 315.0], [45.6, 315.0], [45.7, 315.0], [45.8, 315.0], [45.9, 316.0], [46.0, 316.0], [46.1, 316.0], [46.2, 316.0], [46.3, 316.0], [46.4, 316.0], [46.5, 316.0], [46.6, 316.0], [46.7, 316.0], [46.8, 316.0], [46.9, 316.0], [47.0, 316.0], [47.1, 316.0], [47.2, 316.0], [47.3, 316.0], [47.4, 316.0], [47.5, 316.0], [47.6, 316.0], [47.7, 316.0], [47.8, 316.0], [47.9, 317.0], [48.0, 317.0], [48.1, 317.0], [48.2, 317.0], [48.3, 317.0], [48.4, 317.0], [48.5, 317.0], [48.6, 317.0], [48.7, 317.0], [48.8, 318.0], [48.9, 318.0], [49.0, 318.0], [49.1, 318.0], [49.2, 318.0], [49.3, 318.0], [49.4, 318.0], [49.5, 318.0], [49.6, 318.0], [49.7, 318.0], [49.8, 318.0], [49.9, 318.0], [50.0, 318.0], [50.1, 318.0], [50.2, 318.0], [50.3, 319.0], [50.4, 319.0], [50.5, 319.0], [50.6, 319.0], [50.7, 319.0], [50.8, 319.0], [50.9, 319.0], [51.0, 319.0], [51.1, 319.0], [51.2, 319.0], [51.3, 319.0], [51.4, 320.0], [51.5, 320.0], [51.6, 320.0], [51.7, 320.0], [51.8, 320.0], [51.9, 320.0], [52.0, 320.0], [52.1, 320.0], [52.2, 320.0], [52.3, 320.0], [52.4, 320.0], [52.5, 320.0], [52.6, 320.0], [52.7, 320.0], [52.8, 321.0], [52.9, 321.0], [53.0, 321.0], [53.1, 321.0], [53.2, 321.0], [53.3, 321.0], [53.4, 321.0], [53.5, 322.0], [53.6, 322.0], [53.7, 322.0], [53.8, 322.0], [53.9, 322.0], [54.0, 322.0], [54.1, 322.0], [54.2, 322.0], [54.3, 322.0], [54.4, 322.0], [54.5, 322.0], [54.6, 322.0], [54.7, 323.0], [54.8, 323.0], [54.9, 323.0], [55.0, 323.0], [55.1, 323.0], [55.2, 323.0], [55.3, 323.0], [55.4, 323.0], [55.5, 324.0], [55.6, 324.0], [55.7, 324.0], [55.8, 324.0], [55.9, 324.0], [56.0, 324.0], [56.1, 325.0], [56.2, 325.0], [56.3, 325.0], [56.4, 325.0], [56.5, 325.0], [56.6, 325.0], [56.7, 325.0], [56.8, 325.0], [56.9, 325.0], [57.0, 325.0], [57.1, 325.0], [57.2, 325.0], [57.3, 325.0], [57.4, 326.0], [57.5, 326.0], [57.6, 326.0], [57.7, 326.0], [57.8, 326.0], [57.9, 326.0], [58.0, 326.0], [58.1, 326.0], [58.2, 326.0], [58.3, 326.0], [58.4, 326.0], [58.5, 326.0], [58.6, 326.0], [58.7, 326.0], [58.8, 326.0], [58.9, 327.0], [59.0, 327.0], [59.1, 327.0], [59.2, 327.0], [59.3, 327.0], [59.4, 328.0], [59.5, 328.0], [59.6, 328.0], [59.7, 328.0], [59.8, 328.0], [59.9, 328.0], [60.0, 328.0], [60.1, 329.0], [60.2, 329.0], [60.3, 329.0], [60.4, 329.0], [60.5, 329.0], [60.6, 329.0], [60.7, 329.0], [60.8, 329.0], [60.9, 329.0], [61.0, 330.0], [61.1, 330.0], [61.2, 330.0], [61.3, 331.0], [61.4, 331.0], [61.5, 331.0], [61.6, 331.0], [61.7, 332.0], [61.8, 332.0], [61.9, 333.0], [62.0, 333.0], [62.1, 333.0], [62.2, 333.0], [62.3, 333.0], [62.4, 333.0], [62.5, 334.0], [62.6, 334.0], [62.7, 334.0], [62.8, 335.0], [62.9, 335.0], [63.0, 335.0], [63.1, 335.0], [63.2, 335.0], [63.3, 336.0], [63.4, 336.0], [63.5, 336.0], [63.6, 337.0], [63.7, 337.0], [63.8, 337.0], [63.9, 337.0], [64.0, 337.0], [64.1, 337.0], [64.2, 338.0], [64.3, 338.0], [64.4, 338.0], [64.5, 339.0], [64.6, 339.0], [64.7, 340.0], [64.8, 340.0], [64.9, 340.0], [65.0, 340.0], [65.1, 340.0], [65.2, 340.0], [65.3, 340.0], [65.4, 340.0], [65.5, 340.0], [65.6, 341.0], [65.7, 342.0], [65.8, 342.0], [65.9, 342.0], [66.0, 342.0], [66.1, 342.0], [66.2, 342.0], [66.3, 343.0], [66.4, 344.0], [66.5, 344.0], [66.6, 344.0], [66.7, 344.0], [66.8, 345.0], [66.9, 345.0], [67.0, 345.0], [67.1, 346.0], [67.2, 346.0], [67.3, 346.0], [67.4, 347.0], [67.5, 347.0], [67.6, 347.0], [67.7, 347.0], [67.8, 348.0], [67.9, 348.0], [68.0, 348.0], [68.1, 351.0], [68.2, 352.0], [68.3, 352.0], [68.4, 353.0], [68.5, 353.0], [68.6, 354.0], [68.7, 354.0], [68.8, 354.0], [68.9, 355.0], [69.0, 355.0], [69.1, 356.0], [69.2, 356.0], [69.3, 357.0], [69.4, 357.0], [69.5, 357.0], [69.6, 357.0], [69.7, 357.0], [69.8, 359.0], [69.9, 359.0], [70.0, 360.0], [70.1, 360.0], [70.2, 361.0], [70.3, 361.0], [70.4, 362.0], [70.5, 363.0], [70.6, 364.0], [70.7, 365.0], [70.8, 365.0], [70.9, 366.0], [71.0, 366.0], [71.1, 367.0], [71.2, 367.0], [71.3, 369.0], [71.4, 370.0], [71.5, 370.0], [71.6, 370.0], [71.7, 370.0], [71.8, 371.0], [71.9, 371.0], [72.0, 372.0], [72.1, 372.0], [72.2, 372.0], [72.3, 373.0], [72.4, 373.0], [72.5, 373.0], [72.6, 374.0], [72.7, 374.0], [72.8, 374.0], [72.9, 374.0], [73.0, 375.0], [73.1, 377.0], [73.2, 378.0], [73.3, 378.0], [73.4, 379.0], [73.5, 380.0], [73.6, 380.0], [73.7, 380.0], [73.8, 380.0], [73.9, 381.0], [74.0, 381.0], [74.1, 382.0], [74.2, 382.0], [74.3, 382.0], [74.4, 383.0], [74.5, 383.0], [74.6, 383.0], [74.7, 383.0], [74.8, 383.0], [74.9, 384.0], [75.0, 384.0], [75.1, 385.0], [75.2, 386.0], [75.3, 386.0], [75.4, 386.0], [75.5, 388.0], [75.6, 388.0], [75.7, 388.0], [75.8, 389.0], [75.9, 390.0], [76.0, 392.0], [76.1, 392.0], [76.2, 393.0], [76.3, 397.0], [76.4, 397.0], [76.5, 398.0], [76.6, 398.0], [76.7, 398.0], [76.8, 399.0], [76.9, 400.0], [77.0, 401.0], [77.1, 402.0], [77.2, 403.0], [77.3, 403.0], [77.4, 404.0], [77.5, 404.0], [77.6, 405.0], [77.7, 406.0], [77.8, 407.0], [77.9, 407.0], [78.0, 409.0], [78.1, 411.0], [78.2, 413.0], [78.3, 414.0], [78.4, 415.0], [78.5, 418.0], [78.6, 418.0], [78.7, 419.0], [78.8, 419.0], [78.9, 420.0], [79.0, 420.0], [79.1, 421.0], [79.2, 423.0], [79.3, 423.0], [79.4, 423.0], [79.5, 424.0], [79.6, 424.0], [79.7, 424.0], [79.8, 425.0], [79.9, 426.0], [80.0, 427.0], [80.1, 428.0], [80.2, 429.0], [80.3, 429.0], [80.4, 430.0], [80.5, 434.0], [80.6, 436.0], [80.7, 437.0], [80.8, 438.0], [80.9, 439.0], [81.0, 441.0], [81.1, 442.0], [81.2, 445.0], [81.3, 446.0], [81.4, 446.0], [81.5, 446.0], [81.6, 448.0], [81.7, 448.0], [81.8, 448.0], [81.9, 450.0], [82.0, 451.0], [82.1, 453.0], [82.2, 454.0], [82.3, 454.0], [82.4, 455.0], [82.5, 457.0], [82.6, 457.0], [82.7, 458.0], [82.8, 458.0], [82.9, 460.0], [83.0, 461.0], [83.1, 461.0], [83.2, 463.0], [83.3, 467.0], [83.4, 467.0], [83.5, 469.0], [83.6, 471.0], [83.7, 473.0], [83.8, 474.0], [83.9, 475.0], [84.0, 479.0], [84.1, 479.0], [84.2, 480.0], [84.3, 480.0], [84.4, 481.0], [84.5, 481.0], [84.6, 485.0], [84.7, 485.0], [84.8, 490.0], [84.9, 490.0], [85.0, 493.0], [85.1, 494.0], [85.2, 495.0], [85.3, 498.0], [85.4, 499.0], [85.5, 499.0], [85.6, 503.0], [85.7, 504.0], [85.8, 506.0], [85.9, 508.0], [86.0, 508.0], [86.1, 510.0], [86.2, 513.0], [86.3, 514.0], [86.4, 518.0], [86.5, 519.0], [86.6, 521.0], [86.7, 524.0], [86.8, 524.0], [86.9, 525.0], [87.0, 526.0], [87.1, 533.0], [87.2, 534.0], [87.3, 537.0], [87.4, 540.0], [87.5, 542.0], [87.6, 542.0], [87.7, 542.0], [87.8, 543.0], [87.9, 548.0], [88.0, 550.0], [88.1, 550.0], [88.2, 551.0], [88.3, 555.0], [88.4, 556.0], [88.5, 558.0], [88.6, 560.0], [88.7, 561.0], [88.8, 561.0], [88.9, 562.0], [89.0, 566.0], [89.1, 566.0], [89.2, 574.0], [89.3, 574.0], [89.4, 575.0], [89.5, 575.0], [89.6, 580.0], [89.7, 581.0], [89.8, 582.0], [89.9, 583.0], [90.0, 585.0], [90.1, 589.0], [90.2, 590.0], [90.3, 592.0], [90.4, 596.0], [90.5, 597.0], [90.6, 598.0], [90.7, 602.0], [90.8, 604.0], [90.9, 608.0], [91.0, 608.0], [91.1, 612.0], [91.2, 614.0], [91.3, 615.0], [91.4, 616.0], [91.5, 618.0], [91.6, 621.0], [91.7, 624.0], [91.8, 625.0], [91.9, 630.0], [92.0, 632.0], [92.1, 637.0], [92.2, 638.0], [92.3, 639.0], [92.4, 641.0], [92.5, 645.0], [92.6, 654.0], [92.7, 655.0], [92.8, 660.0], [92.9, 662.0], [93.0, 676.0], [93.1, 677.0], [93.2, 683.0], [93.3, 691.0], [93.4, 699.0], [93.5, 700.0], [93.6, 704.0], [93.7, 706.0], [93.8, 708.0], [93.9, 715.0], [94.0, 719.0], [94.1, 721.0], [94.2, 723.0], [94.3, 730.0], [94.4, 741.0], [94.5, 742.0], [94.6, 744.0], [94.7, 749.0], [94.8, 750.0], [94.9, 751.0], [95.0, 759.0], [95.1, 761.0], [95.2, 766.0], [95.3, 773.0], [95.4, 785.0], [95.5, 785.0], [95.6, 785.0], [95.7, 793.0], [95.8, 813.0], [95.9, 832.0], [96.0, 832.0], [96.1, 835.0], [96.2, 846.0], [96.3, 860.0], [96.4, 866.0], [96.5, 886.0], [96.6, 886.0], [96.7, 895.0], [96.8, 943.0], [96.9, 973.0], [97.0, 980.0], [97.1, 1004.0], [97.2, 1020.0], [97.3, 1021.0], [97.4, 1022.0], [97.5, 1049.0], [97.6, 1050.0], [97.7, 1123.0], [97.8, 1125.0], [97.9, 1132.0], [98.0, 1159.0], [98.1, 1165.0], [98.2, 1184.0], [98.3, 1218.0], [98.4, 1310.0], [98.5, 1373.0], [98.6, 1383.0], [98.7, 1431.0], [98.8, 1436.0], [98.9, 1477.0], [99.0, 1504.0], [99.1, 1629.0], [99.2, 1660.0], [99.3, 1757.0], [99.4, 2039.0], [99.5, 3354.0], [99.6, 3358.0], [99.7, 3367.0], [99.8, 4338.0], [99.9, 6468.0]], "isOverall": false, "label": "SearchBooking", "isController": false}, {"data": [[0.0, 1110.0], [0.1, 1111.0], [0.2, 1113.0], [0.3, 1113.0], [0.4, 1119.0], [0.5, 1121.0], [0.6, 1121.0], [0.7, 1122.0], [0.8, 1123.0], [0.9, 1124.0], [1.0, 1124.0], [1.1, 1124.0], [1.2, 1124.0], [1.3, 1125.0], [1.4, 1126.0], [1.5, 1126.0], [1.6, 1127.0], [1.7, 1127.0], [1.8, 1127.0], [1.9, 1128.0], [2.0, 1129.0], [2.1, 1129.0], [2.2, 1130.0], [2.3, 1130.0], [2.4, 1130.0], [2.5, 1131.0], [2.6, 1131.0], [2.7, 1132.0], [2.8, 1132.0], [2.9, 1133.0], [3.0, 1134.0], [3.1, 1134.0], [3.2, 1134.0], [3.3, 1134.0], [3.4, 1134.0], [3.5, 1135.0], [3.6, 1135.0], [3.7, 1135.0], [3.8, 1136.0], [3.9, 1136.0], [4.0, 1137.0], [4.1, 1138.0], [4.2, 1138.0], [4.3, 1139.0], [4.4, 1139.0], [4.5, 1140.0], [4.6, 1140.0], [4.7, 1140.0], [4.8, 1140.0], [4.9, 1141.0], [5.0, 1141.0], [5.1, 1142.0], [5.2, 1142.0], [5.3, 1143.0], [5.4, 1143.0], [5.5, 1143.0], [5.6, 1143.0], [5.7, 1143.0], [5.8, 1144.0], [5.9, 1145.0], [6.0, 1145.0], [6.1, 1145.0], [6.2, 1146.0], [6.3, 1146.0], [6.4, 1147.0], [6.5, 1147.0], [6.6, 1147.0], [6.7, 1148.0], [6.8, 1148.0], [6.9, 1149.0], [7.0, 1149.0], [7.1, 1149.0], [7.2, 1150.0], [7.3, 1150.0], [7.4, 1150.0], [7.5, 1150.0], [7.6, 1151.0], [7.7, 1151.0], [7.8, 1152.0], [7.9, 1152.0], [8.0, 1152.0], [8.1, 1152.0], [8.2, 1152.0], [8.3, 1152.0], [8.4, 1153.0], [8.5, 1153.0], [8.6, 1153.0], [8.7, 1153.0], [8.8, 1153.0], [8.9, 1153.0], [9.0, 1154.0], [9.1, 1154.0], [9.2, 1154.0], [9.3, 1154.0], [9.4, 1154.0], [9.5, 1154.0], [9.6, 1154.0], [9.7, 1154.0], [9.8, 1154.0], [9.9, 1155.0], [10.0, 1155.0], [10.1, 1155.0], [10.2, 1155.0], [10.3, 1155.0], [10.4, 1156.0], [10.5, 1156.0], [10.6, 1156.0], [10.7, 1156.0], [10.8, 1157.0], [10.9, 1157.0], [11.0, 1157.0], [11.1, 1158.0], [11.2, 1158.0], [11.3, 1159.0], [11.4, 1159.0], [11.5, 1159.0], [11.6, 1159.0], [11.7, 1160.0], [11.8, 1160.0], [11.9, 1160.0], [12.0, 1161.0], [12.1, 1161.0], [12.2, 1161.0], [12.3, 1161.0], [12.4, 1161.0], [12.5, 1162.0], [12.6, 1162.0], [12.7, 1162.0], [12.8, 1162.0], [12.9, 1162.0], [13.0, 1163.0], [13.1, 1163.0], [13.2, 1163.0], [13.3, 1164.0], [13.4, 1164.0], [13.5, 1164.0], [13.6, 1164.0], [13.7, 1164.0], [13.8, 1165.0], [13.9, 1165.0], [14.0, 1165.0], [14.1, 1165.0], [14.2, 1165.0], [14.3, 1166.0], [14.4, 1166.0], [14.5, 1166.0], [14.6, 1167.0], [14.7, 1167.0], [14.8, 1167.0], [14.9, 1167.0], [15.0, 1167.0], [15.1, 1167.0], [15.2, 1167.0], [15.3, 1167.0], [15.4, 1167.0], [15.5, 1168.0], [15.6, 1168.0], [15.7, 1169.0], [15.8, 1169.0], [15.9, 1169.0], [16.0, 1169.0], [16.1, 1169.0], [16.2, 1170.0], [16.3, 1170.0], [16.4, 1170.0], [16.5, 1170.0], [16.6, 1170.0], [16.7, 1170.0], [16.8, 1170.0], [16.9, 1171.0], [17.0, 1173.0], [17.1, 1173.0], [17.2, 1173.0], [17.3, 1173.0], [17.4, 1174.0], [17.5, 1174.0], [17.6, 1174.0], [17.7, 1174.0], [17.8, 1175.0], [17.9, 1176.0], [18.0, 1176.0], [18.1, 1176.0], [18.2, 1177.0], [18.3, 1177.0], [18.4, 1177.0], [18.5, 1178.0], [18.6, 1178.0], [18.7, 1178.0], [18.8, 1179.0], [18.9, 1179.0], [19.0, 1180.0], [19.1, 1181.0], [19.2, 1182.0], [19.3, 1182.0], [19.4, 1183.0], [19.5, 1184.0], [19.6, 1184.0], [19.7, 1185.0], [19.8, 1185.0], [19.9, 1186.0], [20.0, 1186.0], [20.1, 1188.0], [20.2, 1189.0], [20.3, 1189.0], [20.4, 1190.0], [20.5, 1190.0], [20.6, 1190.0], [20.7, 1190.0], [20.8, 1191.0], [20.9, 1192.0], [21.0, 1192.0], [21.1, 1193.0], [21.2, 1193.0], [21.3, 1194.0], [21.4, 1194.0], [21.5, 1194.0], [21.6, 1195.0], [21.7, 1195.0], [21.8, 1197.0], [21.9, 1198.0], [22.0, 1198.0], [22.1, 1198.0], [22.2, 1198.0], [22.3, 1199.0], [22.4, 1199.0], [22.5, 1199.0], [22.6, 1199.0], [22.7, 1201.0], [22.8, 1201.0], [22.9, 1202.0], [23.0, 1202.0], [23.1, 1204.0], [23.2, 1204.0], [23.3, 1206.0], [23.4, 1207.0], [23.5, 1208.0], [23.6, 1208.0], [23.7, 1210.0], [23.8, 1210.0], [23.9, 1210.0], [24.0, 1210.0], [24.1, 1211.0], [24.2, 1212.0], [24.3, 1212.0], [24.4, 1213.0], [24.5, 1213.0], [24.6, 1213.0], [24.7, 1213.0], [24.8, 1214.0], [24.9, 1214.0], [25.0, 1214.0], [25.1, 1215.0], [25.2, 1216.0], [25.3, 1217.0], [25.4, 1217.0], [25.5, 1218.0], [25.6, 1218.0], [25.7, 1219.0], [25.8, 1219.0], [25.9, 1220.0], [26.0, 1220.0], [26.1, 1221.0], [26.2, 1221.0], [26.3, 1222.0], [26.4, 1223.0], [26.5, 1224.0], [26.6, 1224.0], [26.7, 1225.0], [26.8, 1225.0], [26.9, 1226.0], [27.0, 1226.0], [27.1, 1227.0], [27.2, 1227.0], [27.3, 1227.0], [27.4, 1228.0], [27.5, 1230.0], [27.6, 1230.0], [27.7, 1231.0], [27.8, 1232.0], [27.9, 1232.0], [28.0, 1232.0], [28.1, 1233.0], [28.2, 1233.0], [28.3, 1233.0], [28.4, 1233.0], [28.5, 1234.0], [28.6, 1234.0], [28.7, 1235.0], [28.8, 1236.0], [28.9, 1236.0], [29.0, 1236.0], [29.1, 1236.0], [29.2, 1237.0], [29.3, 1237.0], [29.4, 1237.0], [29.5, 1238.0], [29.6, 1239.0], [29.7, 1239.0], [29.8, 1240.0], [29.9, 1241.0], [30.0, 1241.0], [30.1, 1242.0], [30.2, 1243.0], [30.3, 1243.0], [30.4, 1243.0], [30.5, 1244.0], [30.6, 1245.0], [30.7, 1245.0], [30.8, 1245.0], [30.9, 1245.0], [31.0, 1245.0], [31.1, 1246.0], [31.2, 1246.0], [31.3, 1247.0], [31.4, 1247.0], [31.5, 1247.0], [31.6, 1247.0], [31.7, 1248.0], [31.8, 1249.0], [31.9, 1249.0], [32.0, 1250.0], [32.1, 1251.0], [32.2, 1251.0], [32.3, 1251.0], [32.4, 1251.0], [32.5, 1251.0], [32.6, 1251.0], [32.7, 1252.0], [32.8, 1253.0], [32.9, 1253.0], [33.0, 1253.0], [33.1, 1255.0], [33.2, 1255.0], [33.3, 1257.0], [33.4, 1257.0], [33.5, 1257.0], [33.6, 1258.0], [33.7, 1258.0], [33.8, 1259.0], [33.9, 1259.0], [34.0, 1259.0], [34.1, 1259.0], [34.2, 1260.0], [34.3, 1260.0], [34.4, 1261.0], [34.5, 1263.0], [34.6, 1263.0], [34.7, 1263.0], [34.8, 1264.0], [34.9, 1264.0], [35.0, 1265.0], [35.1, 1265.0], [35.2, 1265.0], [35.3, 1266.0], [35.4, 1266.0], [35.5, 1267.0], [35.6, 1267.0], [35.7, 1268.0], [35.8, 1268.0], [35.9, 1268.0], [36.0, 1269.0], [36.1, 1269.0], [36.2, 1270.0], [36.3, 1270.0], [36.4, 1270.0], [36.5, 1271.0], [36.6, 1271.0], [36.7, 1271.0], [36.8, 1271.0], [36.9, 1271.0], [37.0, 1272.0], [37.1, 1272.0], [37.2, 1272.0], [37.3, 1274.0], [37.4, 1274.0], [37.5, 1275.0], [37.6, 1275.0], [37.7, 1275.0], [37.8, 1275.0], [37.9, 1275.0], [38.0, 1277.0], [38.1, 1278.0], [38.2, 1278.0], [38.3, 1278.0], [38.4, 1279.0], [38.5, 1279.0], [38.6, 1279.0], [38.7, 1279.0], [38.8, 1279.0], [38.9, 1280.0], [39.0, 1280.0], [39.1, 1280.0], [39.2, 1282.0], [39.3, 1282.0], [39.4, 1282.0], [39.5, 1283.0], [39.6, 1283.0], [39.7, 1284.0], [39.8, 1284.0], [39.9, 1285.0], [40.0, 1286.0], [40.1, 1286.0], [40.2, 1286.0], [40.3, 1286.0], [40.4, 1287.0], [40.5, 1287.0], [40.6, 1289.0], [40.7, 1289.0], [40.8, 1290.0], [40.9, 1290.0], [41.0, 1290.0], [41.1, 1291.0], [41.2, 1291.0], [41.3, 1291.0], [41.4, 1291.0], [41.5, 1292.0], [41.6, 1292.0], [41.7, 1293.0], [41.8, 1293.0], [41.9, 1295.0], [42.0, 1295.0], [42.1, 1295.0], [42.2, 1295.0], [42.3, 1295.0], [42.4, 1295.0], [42.5, 1296.0], [42.6, 1296.0], [42.7, 1296.0], [42.8, 1298.0], [42.9, 1299.0], [43.0, 1300.0], [43.1, 1301.0], [43.2, 1301.0], [43.3, 1301.0], [43.4, 1302.0], [43.5, 1303.0], [43.6, 1304.0], [43.7, 1304.0], [43.8, 1304.0], [43.9, 1305.0], [44.0, 1305.0], [44.1, 1306.0], [44.2, 1307.0], [44.3, 1307.0], [44.4, 1307.0], [44.5, 1308.0], [44.6, 1308.0], [44.7, 1308.0], [44.8, 1310.0], [44.9, 1310.0], [45.0, 1310.0], [45.1, 1310.0], [45.2, 1311.0], [45.3, 1311.0], [45.4, 1311.0], [45.5, 1312.0], [45.6, 1313.0], [45.7, 1313.0], [45.8, 1313.0], [45.9, 1313.0], [46.0, 1314.0], [46.1, 1314.0], [46.2, 1314.0], [46.3, 1315.0], [46.4, 1316.0], [46.5, 1317.0], [46.6, 1318.0], [46.7, 1318.0], [46.8, 1319.0], [46.9, 1319.0], [47.0, 1319.0], [47.1, 1319.0], [47.2, 1320.0], [47.3, 1321.0], [47.4, 1321.0], [47.5, 1322.0], [47.6, 1322.0], [47.7, 1323.0], [47.8, 1324.0], [47.9, 1324.0], [48.0, 1325.0], [48.1, 1326.0], [48.2, 1327.0], [48.3, 1327.0], [48.4, 1328.0], [48.5, 1328.0], [48.6, 1329.0], [48.7, 1329.0], [48.8, 1329.0], [48.9, 1329.0], [49.0, 1331.0], [49.1, 1331.0], [49.2, 1331.0], [49.3, 1332.0], [49.4, 1332.0], [49.5, 1332.0], [49.6, 1333.0], [49.7, 1333.0], [49.8, 1334.0], [49.9, 1336.0], [50.0, 1336.0], [50.1, 1337.0], [50.2, 1338.0], [50.3, 1338.0], [50.4, 1338.0], [50.5, 1339.0], [50.6, 1339.0], [50.7, 1340.0], [50.8, 1341.0], [50.9, 1341.0], [51.0, 1342.0], [51.1, 1343.0], [51.2, 1343.0], [51.3, 1344.0], [51.4, 1344.0], [51.5, 1344.0], [51.6, 1346.0], [51.7, 1349.0], [51.8, 1351.0], [51.9, 1351.0], [52.0, 1351.0], [52.1, 1351.0], [52.2, 1352.0], [52.3, 1353.0], [52.4, 1354.0], [52.5, 1355.0], [52.6, 1356.0], [52.7, 1356.0], [52.8, 1357.0], [52.9, 1358.0], [53.0, 1358.0], [53.1, 1359.0], [53.2, 1359.0], [53.3, 1360.0], [53.4, 1362.0], [53.5, 1362.0], [53.6, 1363.0], [53.7, 1363.0], [53.8, 1364.0], [53.9, 1364.0], [54.0, 1366.0], [54.1, 1367.0], [54.2, 1368.0], [54.3, 1368.0], [54.4, 1368.0], [54.5, 1369.0], [54.6, 1369.0], [54.7, 1369.0], [54.8, 1369.0], [54.9, 1370.0], [55.0, 1372.0], [55.1, 1373.0], [55.2, 1374.0], [55.3, 1376.0], [55.4, 1377.0], [55.5, 1379.0], [55.6, 1380.0], [55.7, 1382.0], [55.8, 1384.0], [55.9, 1384.0], [56.0, 1390.0], [56.1, 1394.0], [56.2, 1395.0], [56.3, 1395.0], [56.4, 1397.0], [56.5, 1397.0], [56.6, 1398.0], [56.7, 1400.0], [56.8, 1401.0], [56.9, 1402.0], [57.0, 1402.0], [57.1, 1403.0], [57.2, 1404.0], [57.3, 1406.0], [57.4, 1406.0], [57.5, 1408.0], [57.6, 1409.0], [57.7, 1413.0], [57.8, 1415.0], [57.9, 1415.0], [58.0, 1416.0], [58.1, 1416.0], [58.2, 1417.0], [58.3, 1417.0], [58.4, 1418.0], [58.5, 1418.0], [58.6, 1419.0], [58.7, 1420.0], [58.8, 1422.0], [58.9, 1422.0], [59.0, 1422.0], [59.1, 1422.0], [59.2, 1424.0], [59.3, 1425.0], [59.4, 1427.0], [59.5, 1427.0], [59.6, 1428.0], [59.7, 1430.0], [59.8, 1430.0], [59.9, 1434.0], [60.0, 1435.0], [60.1, 1435.0], [60.2, 1435.0], [60.3, 1438.0], [60.4, 1438.0], [60.5, 1438.0], [60.6, 1443.0], [60.7, 1444.0], [60.8, 1445.0], [60.9, 1446.0], [61.0, 1447.0], [61.1, 1450.0], [61.2, 1451.0], [61.3, 1453.0], [61.4, 1457.0], [61.5, 1459.0], [61.6, 1459.0], [61.7, 1460.0], [61.8, 1462.0], [61.9, 1468.0], [62.0, 1469.0], [62.1, 1470.0], [62.2, 1472.0], [62.3, 1473.0], [62.4, 1473.0], [62.5, 1474.0], [62.6, 1475.0], [62.7, 1476.0], [62.8, 1477.0], [62.9, 1479.0], [63.0, 1481.0], [63.1, 1481.0], [63.2, 1483.0], [63.3, 1483.0], [63.4, 1488.0], [63.5, 1489.0], [63.6, 1489.0], [63.7, 1490.0], [63.8, 1490.0], [63.9, 1492.0], [64.0, 1493.0], [64.1, 1501.0], [64.2, 1501.0], [64.3, 1503.0], [64.4, 1504.0], [64.5, 1504.0], [64.6, 1504.0], [64.7, 1506.0], [64.8, 1510.0], [64.9, 1512.0], [65.0, 1517.0], [65.1, 1520.0], [65.2, 1521.0], [65.3, 1523.0], [65.4, 1523.0], [65.5, 1524.0], [65.6, 1526.0], [65.7, 1527.0], [65.8, 1529.0], [65.9, 1531.0], [66.0, 1532.0], [66.1, 1535.0], [66.2, 1537.0], [66.3, 1539.0], [66.4, 1539.0], [66.5, 1541.0], [66.6, 1542.0], [66.7, 1545.0], [66.8, 1546.0], [66.9, 1547.0], [67.0, 1550.0], [67.1, 1553.0], [67.2, 1554.0], [67.3, 1555.0], [67.4, 1559.0], [67.5, 1559.0], [67.6, 1560.0], [67.7, 1562.0], [67.8, 1565.0], [67.9, 1566.0], [68.0, 1571.0], [68.1, 1572.0], [68.2, 1575.0], [68.3, 1577.0], [68.4, 1579.0], [68.5, 1584.0], [68.6, 1588.0], [68.7, 1589.0], [68.8, 1591.0], [68.9, 1596.0], [69.0, 1599.0], [69.1, 1601.0], [69.2, 1601.0], [69.3, 1606.0], [69.4, 1608.0], [69.5, 1610.0], [69.6, 1614.0], [69.7, 1615.0], [69.8, 1617.0], [69.9, 1618.0], [70.0, 1621.0], [70.1, 1622.0], [70.2, 1624.0], [70.3, 1624.0], [70.4, 1626.0], [70.5, 1626.0], [70.6, 1628.0], [70.7, 1631.0], [70.8, 1639.0], [70.9, 1639.0], [71.0, 1639.0], [71.1, 1643.0], [71.2, 1645.0], [71.3, 1653.0], [71.4, 1653.0], [71.5, 1654.0], [71.6, 1658.0], [71.7, 1660.0], [71.8, 1663.0], [71.9, 1663.0], [72.0, 1664.0], [72.1, 1667.0], [72.2, 1670.0], [72.3, 1673.0], [72.4, 1682.0], [72.5, 1683.0], [72.6, 1683.0], [72.7, 1686.0], [72.8, 1690.0], [72.9, 1695.0], [73.0, 1696.0], [73.1, 1700.0], [73.2, 1701.0], [73.3, 1707.0], [73.4, 1707.0], [73.5, 1707.0], [73.6, 1708.0], [73.7, 1714.0], [73.8, 1715.0], [73.9, 1716.0], [74.0, 1721.0], [74.1, 1724.0], [74.2, 1731.0], [74.3, 1734.0], [74.4, 1737.0], [74.5, 1738.0], [74.6, 1743.0], [74.7, 1743.0], [74.8, 1744.0], [74.9, 1747.0], [75.0, 1749.0], [75.1, 1754.0], [75.2, 1760.0], [75.3, 1760.0], [75.4, 1761.0], [75.5, 1763.0], [75.6, 1764.0], [75.7, 1765.0], [75.8, 1767.0], [75.9, 1778.0], [76.0, 1784.0], [76.1, 1785.0], [76.2, 1787.0], [76.3, 1788.0], [76.4, 1789.0], [76.5, 1790.0], [76.6, 1791.0], [76.7, 1793.0], [76.8, 1797.0], [76.9, 1798.0], [77.0, 1800.0], [77.1, 1800.0], [77.2, 1802.0], [77.3, 1803.0], [77.4, 1803.0], [77.5, 1804.0], [77.6, 1805.0], [77.7, 1814.0], [77.8, 1814.0], [77.9, 1820.0], [78.0, 1822.0], [78.1, 1826.0], [78.2, 1827.0], [78.3, 1829.0], [78.4, 1832.0], [78.5, 1832.0], [78.6, 1837.0], [78.7, 1839.0], [78.8, 1840.0], [78.9, 1841.0], [79.0, 1841.0], [79.1, 1844.0], [79.2, 1845.0], [79.3, 1852.0], [79.4, 1853.0], [79.5, 1853.0], [79.6, 1854.0], [79.7, 1854.0], [79.8, 1855.0], [79.9, 1856.0], [80.0, 1856.0], [80.1, 1862.0], [80.2, 1862.0], [80.3, 1871.0], [80.4, 1874.0], [80.5, 1878.0], [80.6, 1880.0], [80.7, 1892.0], [80.8, 1893.0], [80.9, 1898.0], [81.0, 1900.0], [81.1, 1902.0], [81.2, 1902.0], [81.3, 1905.0], [81.4, 1908.0], [81.5, 1913.0], [81.6, 1915.0], [81.7, 1916.0], [81.8, 1923.0], [81.9, 1923.0], [82.0, 1923.0], [82.1, 1929.0], [82.2, 1931.0], [82.3, 1937.0], [82.4, 1939.0], [82.5, 1942.0], [82.6, 1953.0], [82.7, 1956.0], [82.8, 1965.0], [82.9, 1969.0], [83.0, 1969.0], [83.1, 1978.0], [83.2, 1983.0], [83.3, 1989.0], [83.4, 1990.0], [83.5, 1992.0], [83.6, 1997.0], [83.7, 1999.0], [83.8, 2000.0], [83.9, 2005.0], [84.0, 2006.0], [84.1, 2012.0], [84.2, 2014.0], [84.3, 2015.0], [84.4, 2020.0], [84.5, 2025.0], [84.6, 2033.0], [84.7, 2047.0], [84.8, 2049.0], [84.9, 2050.0], [85.0, 2053.0], [85.1, 2053.0], [85.2, 2055.0], [85.3, 2058.0], [85.4, 2061.0], [85.5, 2072.0], [85.6, 2072.0], [85.7, 2082.0], [85.8, 2083.0], [85.9, 2100.0], [86.0, 2102.0], [86.1, 2113.0], [86.2, 2114.0], [86.3, 2121.0], [86.4, 2122.0], [86.5, 2122.0], [86.6, 2128.0], [86.7, 2132.0], [86.8, 2135.0], [86.9, 2137.0], [87.0, 2138.0], [87.1, 2140.0], [87.2, 2141.0], [87.3, 2142.0], [87.4, 2144.0], [87.5, 2144.0], [87.6, 2144.0], [87.7, 2147.0], [87.8, 2156.0], [87.9, 2158.0], [88.0, 2158.0], [88.1, 2162.0], [88.2, 2167.0], [88.3, 2167.0], [88.4, 2179.0], [88.5, 2195.0], [88.6, 2199.0], [88.7, 2202.0], [88.8, 2205.0], [88.9, 2210.0], [89.0, 2218.0], [89.1, 2220.0], [89.2, 2228.0], [89.3, 2232.0], [89.4, 2234.0], [89.5, 2249.0], [89.6, 2249.0], [89.7, 2252.0], [89.8, 2260.0], [89.9, 2272.0], [90.0, 2281.0], [90.1, 2288.0], [90.2, 2291.0], [90.3, 2292.0], [90.4, 2298.0], [90.5, 2309.0], [90.6, 2312.0], [90.7, 2322.0], [90.8, 2322.0], [90.9, 2327.0], [91.0, 2330.0], [91.1, 2330.0], [91.2, 2339.0], [91.3, 2343.0], [91.4, 2347.0], [91.5, 2353.0], [91.6, 2361.0], [91.7, 2382.0], [91.8, 2382.0], [91.9, 2389.0], [92.0, 2393.0], [92.1, 2405.0], [92.2, 2407.0], [92.3, 2412.0], [92.4, 2413.0], [92.5, 2416.0], [92.6, 2440.0], [92.7, 2442.0], [92.8, 2447.0], [92.9, 2450.0], [93.0, 2463.0], [93.1, 2464.0], [93.2, 2548.0], [93.3, 2561.0], [93.4, 2591.0], [93.5, 2607.0], [93.6, 2621.0], [93.7, 2622.0], [93.8, 2637.0], [93.9, 2638.0], [94.0, 2640.0], [94.1, 2646.0], [94.2, 2653.0], [94.3, 2702.0], [94.4, 2715.0], [94.5, 2739.0], [94.6, 2774.0], [94.7, 2805.0], [94.8, 2825.0], [94.9, 2839.0], [95.0, 2843.0], [95.1, 2893.0], [95.2, 2913.0], [95.3, 2926.0], [95.4, 3036.0], [95.5, 3051.0], [95.6, 3104.0], [95.7, 3165.0], [95.8, 3171.0], [95.9, 3193.0], [96.0, 3197.0], [96.1, 3214.0], [96.2, 3260.0], [96.3, 3328.0], [96.4, 3330.0], [96.5, 3409.0], [96.6, 3460.0], [96.7, 3486.0], [96.8, 3531.0], [96.9, 3532.0], [97.0, 3570.0], [97.1, 3604.0], [97.2, 3610.0], [97.3, 3677.0], [97.4, 3682.0], [97.5, 3714.0], [97.6, 3802.0], [97.7, 4009.0], [97.8, 4167.0], [97.9, 4247.0], [98.0, 4408.0], [98.1, 4483.0], [98.2, 4484.0], [98.3, 4510.0], [98.4, 4681.0], [98.5, 4718.0], [98.6, 4759.0], [98.7, 4779.0], [98.8, 4802.0], [98.9, 4804.0], [99.0, 4901.0], [99.1, 5143.0], [99.2, 5159.0], [99.3, 5561.0], [99.4, 5718.0], [99.5, 5764.0], [99.6, 6305.0], [99.7, 6324.0], [99.8, 6563.0], [99.9, 10000.0]], "isOverall": false, "label": "LoginAPI", "isController": false}, {"data": [[0.0, 274.0], [0.1, 275.0], [0.2, 275.0], [0.3, 275.0], [0.4, 275.0], [0.5, 275.0], [0.6, 276.0], [0.7, 276.0], [0.8, 276.0], [0.9, 276.0], [1.0, 277.0], [1.1, 277.0], [1.2, 277.0], [1.3, 277.0], [1.4, 277.0], [1.5, 277.0], [1.6, 277.0], [1.7, 277.0], [1.8, 278.0], [1.9, 278.0], [2.0, 278.0], [2.1, 278.0], [2.2, 278.0], [2.3, 278.0], [2.4, 278.0], [2.5, 278.0], [2.6, 278.0], [2.7, 278.0], [2.8, 279.0], [2.9, 279.0], [3.0, 279.0], [3.1, 279.0], [3.2, 279.0], [3.3, 279.0], [3.4, 279.0], [3.5, 279.0], [3.6, 279.0], [3.7, 279.0], [3.8, 279.0], [3.9, 279.0], [4.0, 279.0], [4.1, 279.0], [4.2, 279.0], [4.3, 279.0], [4.4, 279.0], [4.5, 280.0], [4.6, 280.0], [4.7, 280.0], [4.8, 280.0], [4.9, 280.0], [5.0, 280.0], [5.1, 280.0], [5.2, 280.0], [5.3, 280.0], [5.4, 281.0], [5.5, 281.0], [5.6, 281.0], [5.7, 281.0], [5.8, 281.0], [5.9, 281.0], [6.0, 281.0], [6.1, 281.0], [6.2, 281.0], [6.3, 281.0], [6.4, 281.0], [6.5, 281.0], [6.6, 281.0], [6.7, 281.0], [6.8, 281.0], [6.9, 281.0], [7.0, 282.0], [7.1, 282.0], [7.2, 282.0], [7.3, 282.0], [7.4, 282.0], [7.5, 282.0], [7.6, 282.0], [7.7, 283.0], [7.8, 283.0], [7.9, 283.0], [8.0, 283.0], [8.1, 283.0], [8.2, 283.0], [8.3, 283.0], [8.4, 283.0], [8.5, 283.0], [8.6, 283.0], [8.7, 283.0], [8.8, 284.0], [8.9, 284.0], [9.0, 284.0], [9.1, 284.0], [9.2, 284.0], [9.3, 284.0], [9.4, 284.0], [9.5, 284.0], [9.6, 284.0], [9.7, 284.0], [9.8, 284.0], [9.9, 284.0], [10.0, 284.0], [10.1, 284.0], [10.2, 285.0], [10.3, 285.0], [10.4, 285.0], [10.5, 285.0], [10.6, 285.0], [10.7, 285.0], [10.8, 285.0], [10.9, 285.0], [11.0, 285.0], [11.1, 285.0], [11.2, 285.0], [11.3, 285.0], [11.4, 285.0], [11.5, 285.0], [11.6, 285.0], [11.7, 285.0], [11.8, 285.0], [11.9, 285.0], [12.0, 285.0], [12.1, 285.0], [12.2, 286.0], [12.3, 286.0], [12.4, 286.0], [12.5, 286.0], [12.6, 286.0], [12.7, 286.0], [12.8, 286.0], [12.9, 286.0], [13.0, 286.0], [13.1, 286.0], [13.2, 286.0], [13.3, 286.0], [13.4, 286.0], [13.5, 286.0], [13.6, 286.0], [13.7, 286.0], [13.8, 286.0], [13.9, 286.0], [14.0, 286.0], [14.1, 286.0], [14.2, 286.0], [14.3, 286.0], [14.4, 286.0], [14.5, 287.0], [14.6, 287.0], [14.7, 287.0], [14.8, 287.0], [14.9, 287.0], [15.0, 287.0], [15.1, 287.0], [15.2, 287.0], [15.3, 287.0], [15.4, 287.0], [15.5, 287.0], [15.6, 287.0], [15.7, 287.0], [15.8, 287.0], [15.9, 287.0], [16.0, 287.0], [16.1, 287.0], [16.2, 287.0], [16.3, 288.0], [16.4, 288.0], [16.5, 288.0], [16.6, 288.0], [16.7, 288.0], [16.8, 288.0], [16.9, 288.0], [17.0, 288.0], [17.1, 288.0], [17.2, 288.0], [17.3, 288.0], [17.4, 288.0], [17.5, 288.0], [17.6, 288.0], [17.7, 288.0], [17.8, 288.0], [17.9, 288.0], [18.0, 288.0], [18.1, 289.0], [18.2, 289.0], [18.3, 289.0], [18.4, 289.0], [18.5, 289.0], [18.6, 289.0], [18.7, 289.0], [18.8, 289.0], [18.9, 289.0], [19.0, 289.0], [19.1, 289.0], [19.2, 289.0], [19.3, 289.0], [19.4, 290.0], [19.5, 290.0], [19.6, 290.0], [19.7, 290.0], [19.8, 290.0], [19.9, 290.0], [20.0, 290.0], [20.1, 290.0], [20.2, 290.0], [20.3, 290.0], [20.4, 290.0], [20.5, 290.0], [20.6, 290.0], [20.7, 290.0], [20.8, 290.0], [20.9, 290.0], [21.0, 290.0], [21.1, 290.0], [21.2, 291.0], [21.3, 291.0], [21.4, 291.0], [21.5, 291.0], [21.6, 291.0], [21.7, 291.0], [21.8, 291.0], [21.9, 291.0], [22.0, 291.0], [22.1, 291.0], [22.2, 292.0], [22.3, 292.0], [22.4, 292.0], [22.5, 292.0], [22.6, 292.0], [22.7, 292.0], [22.8, 292.0], [22.9, 292.0], [23.0, 292.0], [23.1, 292.0], [23.2, 292.0], [23.3, 293.0], [23.4, 293.0], [23.5, 293.0], [23.6, 293.0], [23.7, 293.0], [23.8, 293.0], [23.9, 293.0], [24.0, 293.0], [24.1, 293.0], [24.2, 293.0], [24.3, 293.0], [24.4, 293.0], [24.5, 293.0], [24.6, 293.0], [24.7, 293.0], [24.8, 294.0], [24.9, 294.0], [25.0, 294.0], [25.1, 294.0], [25.2, 294.0], [25.3, 294.0], [25.4, 294.0], [25.5, 294.0], [25.6, 294.0], [25.7, 294.0], [25.8, 295.0], [25.9, 295.0], [26.0, 295.0], [26.1, 295.0], [26.2, 295.0], [26.3, 295.0], [26.4, 295.0], [26.5, 295.0], [26.6, 295.0], [26.7, 295.0], [26.8, 295.0], [26.9, 296.0], [27.0, 296.0], [27.1, 296.0], [27.2, 296.0], [27.3, 296.0], [27.4, 296.0], [27.5, 296.0], [27.6, 296.0], [27.7, 296.0], [27.8, 296.0], [27.9, 296.0], [28.0, 296.0], [28.1, 296.0], [28.2, 296.0], [28.3, 297.0], [28.4, 297.0], [28.5, 297.0], [28.6, 297.0], [28.7, 297.0], [28.8, 297.0], [28.9, 297.0], [29.0, 297.0], [29.1, 297.0], [29.2, 297.0], [29.3, 297.0], [29.4, 298.0], [29.5, 298.0], [29.6, 298.0], [29.7, 298.0], [29.8, 298.0], [29.9, 298.0], [30.0, 298.0], [30.1, 298.0], [30.2, 298.0], [30.3, 298.0], [30.4, 298.0], [30.5, 298.0], [30.6, 298.0], [30.7, 298.0], [30.8, 298.0], [30.9, 298.0], [31.0, 299.0], [31.1, 299.0], [31.2, 299.0], [31.3, 299.0], [31.4, 299.0], [31.5, 299.0], [31.6, 299.0], [31.7, 299.0], [31.8, 299.0], [31.9, 299.0], [32.0, 300.0], [32.1, 300.0], [32.2, 300.0], [32.3, 300.0], [32.4, 300.0], [32.5, 300.0], [32.6, 300.0], [32.7, 300.0], [32.8, 300.0], [32.9, 301.0], [33.0, 301.0], [33.1, 301.0], [33.2, 301.0], [33.3, 301.0], [33.4, 301.0], [33.5, 301.0], [33.6, 301.0], [33.7, 302.0], [33.8, 302.0], [33.9, 302.0], [34.0, 302.0], [34.1, 302.0], [34.2, 302.0], [34.3, 302.0], [34.4, 302.0], [34.5, 302.0], [34.6, 302.0], [34.7, 303.0], [34.8, 303.0], [34.9, 303.0], [35.0, 303.0], [35.1, 303.0], [35.2, 303.0], [35.3, 303.0], [35.4, 303.0], [35.5, 303.0], [35.6, 303.0], [35.7, 304.0], [35.8, 304.0], [35.9, 304.0], [36.0, 304.0], [36.1, 304.0], [36.2, 304.0], [36.3, 304.0], [36.4, 305.0], [36.5, 305.0], [36.6, 305.0], [36.7, 305.0], [36.8, 305.0], [36.9, 305.0], [37.0, 305.0], [37.1, 305.0], [37.2, 305.0], [37.3, 305.0], [37.4, 305.0], [37.5, 306.0], [37.6, 306.0], [37.7, 306.0], [37.8, 306.0], [37.9, 306.0], [38.0, 306.0], [38.1, 306.0], [38.2, 307.0], [38.3, 307.0], [38.4, 307.0], [38.5, 307.0], [38.6, 307.0], [38.7, 307.0], [38.8, 308.0], [38.9, 308.0], [39.0, 308.0], [39.1, 308.0], [39.2, 308.0], [39.3, 308.0], [39.4, 309.0], [39.5, 309.0], [39.6, 309.0], [39.7, 309.0], [39.8, 309.0], [39.9, 309.0], [40.0, 309.0], [40.1, 309.0], [40.2, 309.0], [40.3, 309.0], [40.4, 309.0], [40.5, 309.0], [40.6, 310.0], [40.7, 310.0], [40.8, 310.0], [40.9, 310.0], [41.0, 310.0], [41.1, 310.0], [41.2, 310.0], [41.3, 310.0], [41.4, 310.0], [41.5, 310.0], [41.6, 311.0], [41.7, 311.0], [41.8, 311.0], [41.9, 311.0], [42.0, 311.0], [42.1, 311.0], [42.2, 311.0], [42.3, 311.0], [42.4, 311.0], [42.5, 311.0], [42.6, 312.0], [42.7, 312.0], [42.8, 312.0], [42.9, 312.0], [43.0, 312.0], [43.1, 313.0], [43.2, 313.0], [43.3, 313.0], [43.4, 313.0], [43.5, 313.0], [43.6, 314.0], [43.7, 314.0], [43.8, 314.0], [43.9, 314.0], [44.0, 314.0], [44.1, 314.0], [44.2, 314.0], [44.3, 314.0], [44.4, 315.0], [44.5, 315.0], [44.6, 315.0], [44.7, 315.0], [44.8, 315.0], [44.9, 315.0], [45.0, 315.0], [45.1, 315.0], [45.2, 315.0], [45.3, 315.0], [45.4, 315.0], [45.5, 315.0], [45.6, 315.0], [45.7, 315.0], [45.8, 315.0], [45.9, 315.0], [46.0, 316.0], [46.1, 316.0], [46.2, 316.0], [46.3, 316.0], [46.4, 316.0], [46.5, 316.0], [46.6, 316.0], [46.7, 316.0], [46.8, 316.0], [46.9, 316.0], [47.0, 316.0], [47.1, 316.0], [47.2, 316.0], [47.3, 316.0], [47.4, 317.0], [47.5, 317.0], [47.6, 317.0], [47.7, 317.0], [47.8, 317.0], [47.9, 317.0], [48.0, 317.0], [48.1, 317.0], [48.2, 318.0], [48.3, 318.0], [48.4, 318.0], [48.5, 318.0], [48.6, 318.0], [48.7, 318.0], [48.8, 318.0], [48.9, 318.0], [49.0, 318.0], [49.1, 318.0], [49.2, 318.0], [49.3, 318.0], [49.4, 318.0], [49.5, 319.0], [49.6, 319.0], [49.7, 319.0], [49.8, 319.0], [49.9, 319.0], [50.0, 319.0], [50.1, 319.0], [50.2, 319.0], [50.3, 319.0], [50.4, 319.0], [50.5, 319.0], [50.6, 319.0], [50.7, 319.0], [50.8, 319.0], [50.9, 320.0], [51.0, 320.0], [51.1, 320.0], [51.2, 320.0], [51.3, 320.0], [51.4, 320.0], [51.5, 320.0], [51.6, 320.0], [51.7, 320.0], [51.8, 320.0], [51.9, 320.0], [52.0, 320.0], [52.1, 320.0], [52.2, 320.0], [52.3, 321.0], [52.4, 321.0], [52.5, 321.0], [52.6, 321.0], [52.7, 321.0], [52.8, 321.0], [52.9, 321.0], [53.0, 321.0], [53.1, 321.0], [53.2, 321.0], [53.3, 321.0], [53.4, 322.0], [53.5, 322.0], [53.6, 322.0], [53.7, 322.0], [53.8, 322.0], [53.9, 322.0], [54.0, 322.0], [54.1, 323.0], [54.2, 323.0], [54.3, 323.0], [54.4, 323.0], [54.5, 323.0], [54.6, 323.0], [54.7, 323.0], [54.8, 323.0], [54.9, 323.0], [55.0, 323.0], [55.1, 323.0], [55.2, 323.0], [55.3, 323.0], [55.4, 323.0], [55.5, 324.0], [55.6, 324.0], [55.7, 324.0], [55.8, 324.0], [55.9, 324.0], [56.0, 324.0], [56.1, 324.0], [56.2, 324.0], [56.3, 324.0], [56.4, 324.0], [56.5, 325.0], [56.6, 325.0], [56.7, 325.0], [56.8, 325.0], [56.9, 325.0], [57.0, 325.0], [57.1, 325.0], [57.2, 325.0], [57.3, 325.0], [57.4, 325.0], [57.5, 325.0], [57.6, 325.0], [57.7, 325.0], [57.8, 326.0], [57.9, 326.0], [58.0, 326.0], [58.1, 326.0], [58.2, 326.0], [58.3, 327.0], [58.4, 327.0], [58.5, 327.0], [58.6, 327.0], [58.7, 327.0], [58.8, 327.0], [58.9, 327.0], [59.0, 327.0], [59.1, 327.0], [59.2, 327.0], [59.3, 327.0], [59.4, 328.0], [59.5, 328.0], [59.6, 328.0], [59.7, 328.0], [59.8, 328.0], [59.9, 328.0], [60.0, 328.0], [60.1, 328.0], [60.2, 329.0], [60.3, 329.0], [60.4, 329.0], [60.5, 329.0], [60.6, 330.0], [60.7, 330.0], [60.8, 330.0], [60.9, 330.0], [61.0, 331.0], [61.1, 331.0], [61.2, 331.0], [61.3, 331.0], [61.4, 331.0], [61.5, 331.0], [61.6, 331.0], [61.7, 332.0], [61.8, 332.0], [61.9, 332.0], [62.0, 332.0], [62.1, 333.0], [62.2, 333.0], [62.3, 333.0], [62.4, 334.0], [62.5, 334.0], [62.6, 334.0], [62.7, 335.0], [62.8, 335.0], [62.9, 335.0], [63.0, 336.0], [63.1, 336.0], [63.2, 337.0], [63.3, 337.0], [63.4, 338.0], [63.5, 338.0], [63.6, 338.0], [63.7, 338.0], [63.8, 338.0], [63.9, 338.0], [64.0, 338.0], [64.1, 338.0], [64.2, 339.0], [64.3, 339.0], [64.4, 339.0], [64.5, 339.0], [64.6, 339.0], [64.7, 339.0], [64.8, 339.0], [64.9, 340.0], [65.0, 340.0], [65.1, 340.0], [65.2, 341.0], [65.3, 341.0], [65.4, 341.0], [65.5, 341.0], [65.6, 341.0], [65.7, 343.0], [65.8, 343.0], [65.9, 343.0], [66.0, 344.0], [66.1, 344.0], [66.2, 344.0], [66.3, 345.0], [66.4, 345.0], [66.5, 345.0], [66.6, 346.0], [66.7, 346.0], [66.8, 346.0], [66.9, 347.0], [67.0, 347.0], [67.1, 347.0], [67.2, 347.0], [67.3, 348.0], [67.4, 348.0], [67.5, 349.0], [67.6, 349.0], [67.7, 350.0], [67.8, 350.0], [67.9, 350.0], [68.0, 351.0], [68.1, 351.0], [68.2, 352.0], [68.3, 352.0], [68.4, 352.0], [68.5, 353.0], [68.6, 353.0], [68.7, 353.0], [68.8, 354.0], [68.9, 355.0], [69.0, 355.0], [69.1, 356.0], [69.2, 356.0], [69.3, 356.0], [69.4, 358.0], [69.5, 358.0], [69.6, 358.0], [69.7, 359.0], [69.8, 359.0], [69.9, 359.0], [70.0, 359.0], [70.1, 359.0], [70.2, 360.0], [70.3, 360.0], [70.4, 360.0], [70.5, 362.0], [70.6, 362.0], [70.7, 363.0], [70.8, 363.0], [70.9, 363.0], [71.0, 363.0], [71.1, 363.0], [71.2, 364.0], [71.3, 364.0], [71.4, 364.0], [71.5, 364.0], [71.6, 365.0], [71.7, 365.0], [71.8, 366.0], [71.9, 367.0], [72.0, 368.0], [72.1, 368.0], [72.2, 369.0], [72.3, 369.0], [72.4, 369.0], [72.5, 370.0], [72.6, 370.0], [72.7, 370.0], [72.8, 370.0], [72.9, 371.0], [73.0, 371.0], [73.1, 371.0], [73.2, 371.0], [73.3, 373.0], [73.4, 373.0], [73.5, 374.0], [73.6, 377.0], [73.7, 377.0], [73.8, 379.0], [73.9, 379.0], [74.0, 380.0], [74.1, 380.0], [74.2, 381.0], [74.3, 381.0], [74.4, 382.0], [74.5, 382.0], [74.6, 382.0], [74.7, 385.0], [74.8, 386.0], [74.9, 386.0], [75.0, 386.0], [75.1, 386.0], [75.2, 387.0], [75.3, 387.0], [75.4, 387.0], [75.5, 388.0], [75.6, 390.0], [75.7, 390.0], [75.8, 392.0], [75.9, 392.0], [76.0, 393.0], [76.1, 396.0], [76.2, 396.0], [76.3, 397.0], [76.4, 399.0], [76.5, 399.0], [76.6, 401.0], [76.7, 401.0], [76.8, 405.0], [76.9, 405.0], [77.0, 406.0], [77.1, 407.0], [77.2, 412.0], [77.3, 413.0], [77.4, 415.0], [77.5, 415.0], [77.6, 416.0], [77.7, 416.0], [77.8, 417.0], [77.9, 418.0], [78.0, 419.0], [78.1, 419.0], [78.2, 420.0], [78.3, 420.0], [78.4, 422.0], [78.5, 422.0], [78.6, 422.0], [78.7, 424.0], [78.8, 425.0], [78.9, 428.0], [79.0, 429.0], [79.1, 429.0], [79.2, 430.0], [79.3, 431.0], [79.4, 432.0], [79.5, 434.0], [79.6, 436.0], [79.7, 436.0], [79.8, 436.0], [79.9, 437.0], [80.0, 437.0], [80.1, 438.0], [80.2, 439.0], [80.3, 439.0], [80.4, 440.0], [80.5, 441.0], [80.6, 444.0], [80.7, 445.0], [80.8, 445.0], [80.9, 449.0], [81.0, 449.0], [81.1, 451.0], [81.2, 453.0], [81.3, 456.0], [81.4, 459.0], [81.5, 459.0], [81.6, 460.0], [81.7, 461.0], [81.8, 462.0], [81.9, 467.0], [82.0, 469.0], [82.1, 470.0], [82.2, 470.0], [82.3, 470.0], [82.4, 471.0], [82.5, 473.0], [82.6, 474.0], [82.7, 475.0], [82.8, 476.0], [82.9, 476.0], [83.0, 476.0], [83.1, 478.0], [83.2, 478.0], [83.3, 481.0], [83.4, 483.0], [83.5, 485.0], [83.6, 486.0], [83.7, 486.0], [83.8, 486.0], [83.9, 487.0], [84.0, 487.0], [84.1, 488.0], [84.2, 488.0], [84.3, 488.0], [84.4, 491.0], [84.5, 493.0], [84.6, 493.0], [84.7, 494.0], [84.8, 498.0], [84.9, 499.0], [85.0, 500.0], [85.1, 500.0], [85.2, 502.0], [85.3, 503.0], [85.4, 504.0], [85.5, 506.0], [85.6, 509.0], [85.7, 512.0], [85.8, 514.0], [85.9, 517.0], [86.0, 521.0], [86.1, 523.0], [86.2, 532.0], [86.3, 532.0], [86.4, 533.0], [86.5, 534.0], [86.6, 535.0], [86.7, 535.0], [86.8, 536.0], [86.9, 536.0], [87.0, 537.0], [87.1, 538.0], [87.2, 541.0], [87.3, 542.0], [87.4, 543.0], [87.5, 548.0], [87.6, 548.0], [87.7, 551.0], [87.8, 552.0], [87.9, 552.0], [88.0, 554.0], [88.1, 555.0], [88.2, 555.0], [88.3, 556.0], [88.4, 556.0], [88.5, 557.0], [88.6, 557.0], [88.7, 557.0], [88.8, 559.0], [88.9, 560.0], [89.0, 561.0], [89.1, 563.0], [89.2, 564.0], [89.3, 567.0], [89.4, 568.0], [89.5, 570.0], [89.6, 571.0], [89.7, 572.0], [89.8, 573.0], [89.9, 576.0], [90.0, 581.0], [90.1, 585.0], [90.2, 591.0], [90.3, 594.0], [90.4, 606.0], [90.5, 607.0], [90.6, 610.0], [90.7, 612.0], [90.8, 613.0], [90.9, 614.0], [91.0, 615.0], [91.1, 619.0], [91.2, 629.0], [91.3, 634.0], [91.4, 643.0], [91.5, 645.0], [91.6, 645.0], [91.7, 648.0], [91.8, 649.0], [91.9, 650.0], [92.0, 651.0], [92.1, 653.0], [92.2, 654.0], [92.3, 656.0], [92.4, 657.0], [92.5, 658.0], [92.6, 660.0], [92.7, 660.0], [92.8, 665.0], [92.9, 672.0], [93.0, 674.0], [93.1, 678.0], [93.2, 678.0], [93.3, 681.0], [93.4, 687.0], [93.5, 693.0], [93.6, 699.0], [93.7, 699.0], [93.8, 706.0], [93.9, 710.0], [94.0, 714.0], [94.1, 719.0], [94.2, 720.0], [94.3, 727.0], [94.4, 729.0], [94.5, 734.0], [94.6, 743.0], [94.7, 754.0], [94.8, 754.0], [94.9, 758.0], [95.0, 758.0], [95.1, 762.0], [95.2, 768.0], [95.3, 774.0], [95.4, 775.0], [95.5, 788.0], [95.6, 801.0], [95.7, 804.0], [95.8, 806.0], [95.9, 840.0], [96.0, 884.0], [96.1, 888.0], [96.2, 905.0], [96.3, 923.0], [96.4, 926.0], [96.5, 934.0], [96.6, 940.0], [96.7, 941.0], [96.8, 948.0], [96.9, 952.0], [97.0, 986.0], [97.1, 1010.0], [97.2, 1012.0], [97.3, 1040.0], [97.4, 1075.0], [97.5, 1118.0], [97.6, 1137.0], [97.7, 1156.0], [97.8, 1189.0], [97.9, 1197.0], [98.0, 1257.0], [98.1, 1270.0], [98.2, 1463.0], [98.3, 1472.0], [98.4, 1497.0], [98.5, 1579.0], [98.6, 1644.0], [98.7, 1644.0], [98.8, 1675.0], [98.9, 1750.0], [99.0, 1823.0], [99.1, 1850.0], [99.2, 1894.0], [99.3, 2052.0], [99.4, 2053.0], [99.5, 2080.0], [99.6, 2181.0], [99.7, 4324.0], [99.8, 4470.0], [99.9, 5372.0]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 476.0, "series": [{"data": [[600.0, 28.0], [700.0, 23.0], [200.0, 293.0], [800.0, 10.0], [3300.0, 3.0], [900.0, 3.0], [1000.0, 6.0], [4300.0, 1.0], [1100.0, 6.0], [300.0, 476.0], [1200.0, 1.0], [1300.0, 3.0], [1400.0, 3.0], [1500.0, 1.0], [400.0, 87.0], [1600.0, 2.0], [6400.0, 1.0], [1700.0, 1.0], [500.0, 51.0], [2000.0, 1.0]], "isOverall": false, "label": "SearchBooking", "isController": false}, {"data": [[10000.0, 1.0], [1100.0, 226.0], [1200.0, 203.0], [1300.0, 137.0], [1400.0, 74.0], [1500.0, 51.0], [1600.0, 40.0], [1700.0, 39.0], [1800.0, 40.0], [1900.0, 28.0], [2000.0, 21.0], [2100.0, 28.0], [2200.0, 18.0], [2300.0, 16.0], [2400.0, 11.0], [2500.0, 3.0], [2600.0, 8.0], [2700.0, 4.0], [2800.0, 5.0], [2900.0, 2.0], [3000.0, 2.0], [3100.0, 5.0], [3200.0, 2.0], [3300.0, 2.0], [3400.0, 3.0], [3500.0, 3.0], [3600.0, 4.0], [3700.0, 1.0], [3800.0, 1.0], [4000.0, 1.0], [4200.0, 1.0], [4100.0, 1.0], [4600.0, 1.0], [4500.0, 1.0], [4400.0, 3.0], [4800.0, 2.0], [4700.0, 3.0], [5100.0, 2.0], [4900.0, 1.0], [5500.0, 1.0], [5700.0, 2.0], [6300.0, 2.0], [6500.0, 1.0]], "isOverall": false, "label": "LoginAPI", "isController": false}, {"data": [[2100.0, 1.0], [600.0, 34.0], [700.0, 18.0], [200.0, 319.0], [800.0, 6.0], [900.0, 9.0], [1000.0, 4.0], [4300.0, 1.0], [1100.0, 5.0], [4400.0, 1.0], [300.0, 447.0], [1200.0, 2.0], [5300.0, 1.0], [1400.0, 3.0], [1500.0, 1.0], [400.0, 84.0], [1600.0, 3.0], [1700.0, 1.0], [1800.0, 3.0], [500.0, 54.0], [2000.0, 3.0]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1708.0, "series": [{"data": [[0.0, 1708.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 906.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 380.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 6.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.5, "minX": 1.75828344E12, "maxY": 13.93877551020408, "series": [{"data": [[1.75828356E12, 11.673267326732676], [1.75828374E12, 13.611650485436897], [1.75828404E12, 11.568345323741008], [1.75828368E12, 12.18213058419244], [1.75828386E12, 13.93877551020408], [1.75828398E12, 13.435215946843858], [1.7582835E12, 11.93939393939393], [1.7582838E12, 12.990033222591356], [1.75828344E12, 10.33333333333333], [1.7582841E12, 1.5], [1.75828362E12, 11.614093959731543], [1.75828392E12, 13.07540983606556]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7582841E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 286.0, "minX": 1.0, "maxY": 7160.666666666667, "series": [{"data": [[8.0, 312.6666666666667], [2.0, 320.0], [9.0, 362.64285714285717], [10.0, 324.97368421052636], [11.0, 348.92207792207785], [12.0, 349.87659574468086], [3.0, 286.0], [13.0, 365.34418604651165], [14.0, 398.77310924369755], [15.0, 475.28260869565213], [16.0, 655.6060606060609], [4.0, 420.0], [1.0, 321.0], [17.0, 512.0000000000001], [18.0, 655.4999999999999], [19.0, 1532.875], [20.0, 1430.0], [5.0, 534.0], [21.0, 3354.0], [22.0, 1383.0], [6.0, 427.0], [7.0, 373.0]], "isOverall": false, "label": "SearchBooking", "isController": false}, {"data": [[12.764000000000005, 406.0460000000001]], "isOverall": false, "label": "SearchBooking-Aggregated", "isController": false}, {"data": [[8.0, 1618.090909090909], [9.0, 1280.0227272727273], [10.0, 1396.010204081633], [11.0, 1385.9128205128204], [12.0, 1405.321585903083], [3.0, 1610.0], [13.0, 1480.7453416149065], [14.0, 1767.9083333333333], [15.0, 2202.090909090908], [16.0, 2562.707317073171], [4.0, 1520.0], [17.0, 2582.818181818182], [18.0, 2001.466666666667], [19.0, 3040.333333333333], [20.0, 7160.666666666667], [5.0, 1279.0], [21.0, 3322.3333333333335], [7.0, 1201.0]], "isOverall": false, "label": "LoginAPI", "isController": false}, {"data": [[12.436000000000003, 1613.0890000000002]], "isOverall": false, "label": "LoginAPI-Aggregated", "isController": false}, {"data": [[8.0, 295.625], [9.0, 324.03846153846143], [10.0, 335.14], [11.0, 355.0271739130435], [12.0, 341.66826923076906], [3.0, 343.3333333333333], [13.0, 374.8888888888891], [14.0, 395.172131147541], [15.0, 653.049180327869], [16.0, 696.0740740740739], [17.0, 514.3809523809524], [18.0, 718.0357142857143], [19.0, 839.1666666666667], [5.0, 347.0], [21.0, 4470.0]], "isOverall": false, "label": "CreateBooking", "isController": false}, {"data": [[12.57099999999999, 408.5890000000002]], "isOverall": false, "label": "CreateBooking-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 22.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8.0, "minX": 1.75828344E12, "maxY": 4425.116666666667, "series": [{"data": [[1.75828356E12, 4342.15], [1.75828374E12, 4425.116666666667], [1.75828404E12, 3986.133333333333], [1.75828368E12, 4173.583333333333], [1.75828386E12, 4210.283333333334], [1.75828398E12, 4310.55], [1.7582835E12, 4250.416666666667], [1.7582838E12, 4291.616666666667], [1.75828344E12, 292.6166666666667], [1.7582841E12, 29.666666666666668], [1.75828362E12, 4267.45], [1.75828392E12, 4371.366666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75828356E12, 1623.4333333333334], [1.75828374E12, 1657.5666666666666], [1.75828404E12, 1490.9166666666667], [1.75828368E12, 1558.1166666666666], [1.75828386E12, 1576.2666666666667], [1.75828398E12, 1617.4], [1.7582835E12, 1592.25], [1.7582838E12, 1614.7], [1.75828344E12, 116.51666666666667], [1.7582841E12, 8.0], [1.75828362E12, 1597.2333333333333], [1.75828392E12, 1629.3166666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7582841E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 307.57575757575756, "minX": 1.75828344E12, "maxY": 2267.520833333334, "series": [{"data": [[1.75828356E12, 310.8627450980392], [1.75828374E12, 420.10784313725486], [1.75828404E12, 390.1052631578946], [1.75828368E12, 356.1010101010101], [1.75828386E12, 494.5252525252524], [1.75828398E12, 421.35714285714295], [1.7582835E12, 307.57575757575756], [1.7582838E12, 605.8673469387754], [1.75828344E12, 324.0], [1.7582841E12, 320.5], [1.75828362E12, 317.2626262626262], [1.75828392E12, 443.0288461538463]], "isOverall": false, "label": "SearchBooking", "isController": false}, {"data": [[1.75828356E12, 1266.0299999999995], [1.75828374E12, 1833.9230769230771], [1.75828404E12, 1570.5393258426966], [1.75828368E12, 1369.421052631579], [1.75828386E12, 2267.520833333334], [1.75828398E12, 1777.1372549019604], [1.7582835E12, 1231.79797979798], [1.7582838E12, 1758.165048543689], [1.75828344E12, 1440.090909090909], [1.75828362E12, 1272.0200000000002], [1.75828392E12, 1790.6237623762383]], "isOverall": false, "label": "LoginAPI", "isController": false}, {"data": [[1.75828356E12, 310.158415841584], [1.75828374E12, 439.76699029126223], [1.75828404E12, 400.29787234042567], [1.75828368E12, 365.9072164948454], [1.75828386E12, 521.5151515151515], [1.75828398E12, 466.94059405940607], [1.7582835E12, 308.7474747474746], [1.7582838E12, 529.7100000000002], [1.75828344E12, 326.7142857142857], [1.75828362E12, 315.7676767676769], [1.75828392E12, 429.69999999999993]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7582841E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 307.51515151515144, "minX": 1.75828344E12, "maxY": 2267.4999999999995, "series": [{"data": [[1.75828356E12, 310.8235294117648], [1.75828374E12, 420.03921568627436], [1.75828404E12, 390.0842105263156], [1.75828368E12, 356.090909090909], [1.75828386E12, 494.51515151515144], [1.75828398E12, 421.3469387755103], [1.7582835E12, 307.51515151515144], [1.7582838E12, 605.8571428571428], [1.75828344E12, 323.6666666666667], [1.7582841E12, 320.5], [1.75828362E12, 317.2525252525253], [1.75828392E12, 443.0096153846155]], "isOverall": false, "label": "SearchBooking", "isController": false}, {"data": [[1.75828356E12, 1266.0], [1.75828374E12, 1833.8846153846152], [1.75828404E12, 1570.5168539325844], [1.75828368E12, 1369.3894736842105], [1.75828386E12, 2267.4999999999995], [1.75828398E12, 1777.0980392156857], [1.7582835E12, 1231.7373737373734], [1.7582838E12, 1758.1262135922325], [1.75828344E12, 1439.6363636363635], [1.75828362E12, 1272.0100000000007], [1.75828392E12, 1790.6237623762383]], "isOverall": false, "label": "LoginAPI", "isController": false}, {"data": [[1.75828356E12, 310.1485148514853], [1.75828374E12, 439.7572815533981], [1.75828404E12, 400.2765957446809], [1.75828368E12, 365.88659793814423], [1.75828386E12, 521.5050505050505], [1.75828398E12, 466.8712871287128], [1.7582835E12, 308.6969696969697], [1.7582838E12, 529.6899999999999], [1.75828344E12, 326.4285714285714], [1.75828362E12, 315.7272727272728], [1.75828392E12, 429.69999999999993]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7582841E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75828344E12, "maxY": 1748.2604166666672, "series": [{"data": [[1.75828356E12, 0.0], [1.75828374E12, 0.0], [1.75828404E12, 0.0], [1.75828368E12, 0.0], [1.75828386E12, 0.0], [1.75828398E12, 0.0], [1.7582835E12, 0.0], [1.7582838E12, 0.0], [1.75828344E12, 0.0], [1.7582841E12, 0.0], [1.75828362E12, 0.0], [1.75828392E12, 0.0]], "isOverall": false, "label": "SearchBooking", "isController": false}, {"data": [[1.75828356E12, 954.9100000000002], [1.75828374E12, 1416.8076923076922], [1.75828404E12, 1188.808988764045], [1.75828368E12, 1036.642105263158], [1.75828386E12, 1748.2604166666672], [1.75828398E12, 1364.5882352941173], [1.7582835E12, 926.9898989898984], [1.7582838E12, 1203.6504854368932], [1.75828344E12, 1098.5454545454545], [1.75828362E12, 958.3599999999998], [1.75828392E12, 1351.0891089108904]], "isOverall": false, "label": "LoginAPI", "isController": false}, {"data": [[1.75828356E12, 0.0], [1.75828374E12, 0.0], [1.75828404E12, 0.0], [1.75828368E12, 0.0], [1.75828386E12, 0.0], [1.75828398E12, 0.0], [1.7582835E12, 0.0], [1.7582838E12, 0.0], [1.75828344E12, 0.0], [1.75828362E12, 0.0], [1.75828392E12, 0.0]], "isOverall": false, "label": "CreateBooking", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7582841E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 274.0, "minX": 1.75828344E12, "maxY": 10000.0, "series": [{"data": [[1.75828356E12, 2142.0], [1.75828374E12, 5159.0], [1.75828404E12, 2637.0], [1.75828368E12, 3193.0], [1.75828386E12, 10000.0], [1.75828398E12, 4759.0], [1.7582835E12, 1492.0], [1.7582838E12, 5561.0], [1.75828344E12, 1852.0], [1.7582841E12, 321.0], [1.75828362E12, 1524.0], [1.75828392E12, 3802.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75828356E12, 1320.2], [1.75828374E12, 1923.0], [1.75828404E12, 1666.1999999999998], [1.75828368E12, 1348.8000000000002], [1.75828386E12, 2336.5], [1.75828398E12, 2098.0], [1.7582835E12, 1289.8], [1.7582838E12, 1923.0], [1.75828344E12, 1648.2], [1.7582841E12, 321.0], [1.75828362E12, 1291.1], [1.75828392E12, 1884.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75828356E12, 1503.3599999999997], [1.75828374E12, 4891.299999999997], [1.75828404E12, 2253.529999999998], [1.75828368E12, 3109.3599999999988], [1.75828386E12, 6335.950000000003], [1.75828398E12, 3518.6400000000112], [1.7582835E12, 1473.3199999999997], [1.7582838E12, 4708.640000000014], [1.75828344E12, 1852.0], [1.7582841E12, 321.0], [1.75828362E12, 1444.4599999999996], [1.75828392E12, 3456.94]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75828356E12, 1363.8], [1.75828374E12, 2357.0], [1.75828404E12, 1829.6000000000001], [1.75828368E12, 1622.3999999999996], [1.75828386E12, 3550.0], [1.75828398E12, 2375.9999999999986], [1.7582835E12, 1331.0], [1.7582838E12, 2149.999999999999], [1.75828344E12, 1832.7999999999997], [1.7582841E12, 321.0], [1.75828362E12, 1322.25], [1.75828392E12, 2382.499999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75828356E12, 274.0], [1.75828374E12, 290.0], [1.75828404E12, 274.0], [1.75828368E12, 278.0], [1.75828386E12, 274.0], [1.75828398E12, 275.0], [1.7582835E12, 275.0], [1.7582838E12, 278.0], [1.75828344E12, 314.0], [1.7582841E12, 320.0], [1.75828362E12, 285.0], [1.75828392E12, 275.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75828356E12, 325.0], [1.75828374E12, 462.0], [1.75828404E12, 421.5], [1.75828368E12, 314.0], [1.75828386E12, 590.5], [1.75828398E12, 523.0], [1.7582835E12, 323.0], [1.7582838E12, 485.0], [1.75828344E12, 1287.0], [1.7582841E12, 320.5], [1.75828362E12, 322.5], [1.75828392E12, 473.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7582841E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 332.5, "minX": 1.0, "maxY": 6468.0, "series": [{"data": [[2.0, 450.0], [8.0, 332.5], [9.0, 365.0], [10.0, 377.0], [11.0, 429.0], [3.0, 424.0], [13.0, 521.0], [15.0, 4366.0], [4.0, 417.5], [1.0, 671.0], [5.0, 382.5], [6.0, 358.5], [7.0, 400.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[10.0, 6468.0], [15.0, 3358.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 332.5, "minX": 1.0, "maxY": 6468.0, "series": [{"data": [[2.0, 450.0], [8.0, 332.5], [9.0, 365.0], [10.0, 377.0], [11.0, 429.0], [3.0, 424.0], [13.0, 521.0], [15.0, 4366.0], [4.0, 417.5], [1.0, 671.0], [5.0, 382.5], [6.0, 358.5], [7.0, 400.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[10.0, 6468.0], [15.0, 3358.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 15.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75828344E12, "maxY": 5.033333333333333, "series": [{"data": [[1.75828356E12, 5.0], [1.75828374E12, 5.033333333333333], [1.75828404E12, 4.6], [1.75828368E12, 4.983333333333333], [1.75828386E12, 4.983333333333333], [1.75828398E12, 5.016666666666667], [1.7582835E12, 4.983333333333333], [1.7582838E12, 5.0], [1.75828344E12, 0.4], [1.7582841E12, 0.03333333333333333], [1.75828362E12, 4.95], [1.75828392E12, 5.016666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7582841E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75828344E12, "maxY": 5.15, "series": [{"data": [[1.75828356E12, 5.05], [1.75828374E12, 5.15], [1.75828404E12, 4.633333333333334], [1.75828368E12, 4.85], [1.75828386E12, 4.9], [1.75828398E12, 5.016666666666667], [1.7582835E12, 4.95], [1.7582838E12, 4.916666666666667], [1.75828344E12, 0.35], [1.7582841E12, 0.03333333333333333], [1.75828362E12, 4.966666666666667], [1.75828392E12, 5.083333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7582838E12, 0.1]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7582841E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75828344E12, "maxY": 1.7333333333333334, "series": [{"data": [[1.75828356E12, 1.7], [1.75828374E12, 1.7], [1.75828404E12, 1.5833333333333333], [1.75828368E12, 1.65], [1.75828386E12, 1.65], [1.75828398E12, 1.6333333333333333], [1.7582835E12, 1.65], [1.7582838E12, 1.5333333333333334], [1.75828344E12, 0.05], [1.7582841E12, 0.03333333333333333], [1.75828362E12, 1.65], [1.75828392E12, 1.7333333333333334]], "isOverall": false, "label": "SearchBooking-success", "isController": false}, {"data": [[1.75828356E12, 1.6666666666666667], [1.75828374E12, 1.7333333333333334], [1.75828404E12, 1.4833333333333334], [1.75828368E12, 1.5833333333333333], [1.75828386E12, 1.6], [1.75828398E12, 1.7], [1.7582835E12, 1.65], [1.7582838E12, 1.7166666666666666], [1.75828344E12, 0.18333333333333332], [1.75828362E12, 1.6666666666666667], [1.75828392E12, 1.6833333333333333]], "isOverall": false, "label": "LoginAPI-success", "isController": false}, {"data": [[1.7582838E12, 0.1]], "isOverall": false, "label": "SearchBooking-failure", "isController": false}, {"data": [[1.75828356E12, 1.6833333333333333], [1.75828374E12, 1.7166666666666666], [1.75828404E12, 1.5666666666666667], [1.75828368E12, 1.6166666666666667], [1.75828386E12, 1.65], [1.75828398E12, 1.6833333333333333], [1.7582835E12, 1.65], [1.7582838E12, 1.6666666666666667], [1.75828344E12, 0.11666666666666667], [1.75828362E12, 1.65], [1.75828392E12, 1.6666666666666667]], "isOverall": false, "label": "CreateBooking-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7582841E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75828344E12, "maxY": 5.15, "series": [{"data": [[1.75828356E12, 5.05], [1.75828374E12, 5.15], [1.75828404E12, 4.633333333333334], [1.75828368E12, 4.85], [1.75828386E12, 4.9], [1.75828398E12, 5.016666666666667], [1.7582835E12, 4.95], [1.7582838E12, 4.916666666666667], [1.75828344E12, 0.35], [1.7582841E12, 0.03333333333333333], [1.75828362E12, 4.966666666666667], [1.75828392E12, 5.083333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7582838E12, 0.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7582841E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

